image: atlassianlabs/docker-node-jdk-chrome-firefox:latest
options:
  max-time: 10 # minutes
definitions:
  caches:
    sonar: ~/.sonar/cache
    prototype-node: prototype/node_modules
  steps:
    - step: &validate
        name: Validate
        caches:
          - node
          - prototype-node
        script:
          - npm install --unsafe-perm
          - npm run lint:ci
          - npm run test:ci
          - npm run sonar:ci-js
          - npm run sonar:ci-scss
        artifacts:
          - prototype/reports/**
    - step: &build
        name: Build
        caches:
          - node
          - prototype-node
        script:
          - npm install --unsafe-perm
          - npm run build:ci
        artifacts:
          - prototype/deploy/**
    - step: &build-gated
        name: Quality Gate, then Build
        caches:
          - node
          - prototype-node
          - sonar
        clone:
          depth: full
        script:
          - pipe: sonarsource/sonarcloud-scan:0.1.5
            variables:
              SONAR_TOKEN: ${SONAR_TOKEN}
              EXTRA_ARGS: '-Dsonar.projectBaseDir=./prototype'
          - npm install --unsafe-perm
          - npm run build:ci
        artifacts:
          - prototype/deploy/**
pipelines:
  pull-requests:
    '**':
      - step: *validate
      - step: *build-gated
      - step:
          name: Deploy to test branch
          deployment: test
          script:
            - cat ~/.ssh/known_hosts
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'rm -rf ${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/} && mkdir -p ${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/}'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/}'
                LOCAL_PATH: 'prototype/deploy'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'unzip ${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/}/*.zip && rm -f ${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/}/*.zip'
  branches:
    master:
      - step: *validate
      - step: *build-gated
      - step:
          name: Deploy to staging
          deployment: staging
          script:
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'rm -rf ${DEPLOY_DOC_ROOT}/staging && mkdir -p ${DEPLOY_DOC_ROOT}/staging'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/staging'
                LOCAL_PATH: 'prototype/deploy'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'unzip ${DEPLOY_DOC_ROOT}/staging/*.zip && rm -f ${DEPLOY_DOC_ROOT}/staging/*.zip'
    'release/*':
      - step: *build
      - step:
          name: Deploy to production
          deployment: production
          trigger: manual
          script:
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'rm -rf ${DEPLOY_DOC_ROOT}/production && mkdir -p ${DEPLOY_DOC_ROOT}/production'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/production'
                LOCAL_PATH: 'prototype/deploy'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'unzip ${DEPLOY_DOC_ROOT}/production/*.zip && rm -f ${DEPLOY_DOC_ROOT}/production/*.zip'

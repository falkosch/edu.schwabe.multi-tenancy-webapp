image: atlassianlabs/docker-node-jdk-chrome-firefox:latest
options:
  max-time: 10 # minutes
definitions:
  caches:
    sonar: ~/.sonar/cache
  steps:
    - step: &validate
        name: Validate
        caches:
          - node
        script:
          - npm install --unsafe-perm
          - npm run lint:ci
          - npm run test:ci
          - npm run sonar:ci-eslint
          - npm run sonar:ci-stylelint
        artifacts:
          - reports/**
          - base-app/reports/**
          - tenants/*/reports/**
    - step: &build
        name: Build
        caches:
          - node
        script:
          - npm install --unsafe-perm
          - npm run build:ci
        artifacts:
          - tenants/*/deploy/**
    - step: &build-gated
        name: Quality Gate, then Build
        caches:
          - node
          - sonar
        clone:
          depth: full
        script:
          - pipe: sonarsource/sonarcloud-scan:0.1.5
            variables:
              SONAR_TOKEN: ${SONAR_TOKEN}
          - npm install --unsafe-perm
          - npm run build:ci
        artifacts:
          - tenants/*/deploy/**
pipelines:
  pull-requests:
    '**':
      - step: *validate
      - step: *build-gated
      - step:
          name: Deploy to test branch
          deployment: test
          script:
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf ${BITBUCKET_BRANCH##*/} && mkdir ${BITBUCKET_BRANCH##*/}'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/}'
                LOCAL_PATH: 'tenants/tenant1/deploy/*'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/${BITBUCKET_BRANCH##*/} && unzip *.zip && rm -f *.zip*'
  branches:
    master:
      - step: *validate
      - step: *build-gated
      - step:
          name: Deploy to staging
          deployment: staging
          script:
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf staging && mkdir staging'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/staging'
                LOCAL_PATH: 'tenants/tenant1/deploy/*'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/staging && unzip *.zip && rm -f *.zip*'
    'release/*':
      - step: *build
      - step:
          name: Deploy to production
          deployment: production
          trigger: manual
          script:
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf production && mkdir production'
            - pipe: atlassian/sftp-deploy:0.4.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/production'
                LOCAL_PATH: 'tenants/tenant1/*'
            - pipe: atlassian/ssh-run:0.1.4
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/production && unzip *.zip && rm -f *.zip*'

image: atlassianlabs/docker-node-jdk-chrome-firefox:2019-09-09
options:
  max-time: 15 # minutes
definitions:
  caches:
    sonar: ~/.sonar/cache
  steps:
    - step: &validate
        name: Validate
        caches:
          - node
          - sonar
        clone:
          depth: full
        script:
          - npm install --unsafe-perm
          - npm run lint:ci
          - npm run sonar:ci-eslint
          - npm run sonar:ci-stylelint
          - npm run test:ci
          - pipe: sonarsource/sonarcloud-scan:1.0.1
            variables:
              SONAR_TOKEN: ${SONAR_TOKEN}
              SONAR_SCANNER_OPTS: -Xmx256m
pipelines:
  pull-requests:
    '**':
      - step: *validate
      - step:
          name: Deploy to testing
          deployment: test
          caches:
            - node
          script:
            - npm install --unsafe-perm
            - node tools/determine-base-URL.js PR-${BITBUCKET_PR_ID}
            - npm run build:ci
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf PR-${BITBUCKET_PR_ID} && mkdir -p PR-${BITBUCKET_PR_ID}'
            - pipe: atlassian/sftp-deploy:0.5.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/PR-${BITBUCKET_PR_ID}'
                LOCAL_PATH: 'apps/*/deploy/*'
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/PR-${BITBUCKET_PR_ID} && for f in *.zip; do unzip \$f -d \${f%.zip}; done'
  branches:
    master:
      - step: *validate
      - step:
          name: Deploy to staging
          deployment: staging
          caches:
            - node
          script:
            - npm install --unsafe-perm
            - node tools/determine-base-URL.js staging
            - npm run build:ci
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf staging && mkdir -p staging'
            - pipe: atlassian/sftp-deploy:0.5.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/staging'
                LOCAL_PATH: 'apps/*/deploy/*'
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/staging && for f in *.zip; do unzip \$f -d \${f%.zip}; done'
      - step:
          name: Deploy to production
          deployment: production
          trigger: manual
          caches:
            - node
          script:
            - npm install --unsafe-perm
            - node tools/determine-base-URL.js production
            - npm run build:ci
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT} && rm -rf production && mkdir -p production'
            - pipe: atlassian/sftp-deploy:0.5.0
              variables:
                USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                REMOTE_PATH: '${DEPLOY_DOC_ROOT}/production'
                LOCAL_PATH: 'apps/*/deploy/*'
            - pipe: atlassian/ssh-run:0.2.2
              variables:
                SSH_USER: ${DEPLOY_USER}
                SERVER: ${DEPLOY_WEBSERVER}
                COMMAND: 'cd ${DEPLOY_DOC_ROOT}/production && for f in *.zip; do unzip \$f -d \${f%.zip}; done'
